<?php
    // ここにPHPのコードを記載
    echo "hello world\n";

    // echoについて
    // echo以下のオブジェクトを画面に表示する
    // WEBサービス開発中のデバッグなどによく使う

    // 文字列について
    // ダブルクォーテーション("")で囲われた部分は文字列として認識される

    // 変数について
    // 好きな値を保持しておくための箱
    // $変数名 = 値;
    // ユーザーが何か入力した値を別の画面などで使用するために変数に入れておく
    // 何か計算した結果の数字を入れた変数をわかりやすい名前でつくっておくことで、
    // その数字が何なのかをわかりやすく表現する
    $name = "Shinya Hirai";
    $pie = 3.141592;

    // 文字列型と整数型
    // 上記ふたつの型はまったく別の扱いになるので注意
    // 四則演算できるかどうか
    $str = "25";
    $num = 25;

    // 変数をechoで表示
    echo $str + $str; // 50
    echo $num + $num; // 50
    // 本来の言語であれば、文字列同士を足すと、数字の足し算ではなく、
    // 文字同士を連結させて表示する (2525か50か)

    // 少数 float
    $pie = 3.141592;

    // 論理値 bool
    // true / falseかの値が入る型
    // $isBoolや$answerFlagなどといった名前の変数を作るのが実践でもよくある
    // if文と組み合わせることが多い
    $answerFlag = false;

    // 配列 array
    $members = array("Rei","Yasu","Shogo","Yutaka","Takuya","Reon","Yusuke","Shinya","HelloWorld");
    // index           0      1       2       3        4       5      6     
    echo "\n";
    echo $members[2];
    // unset($members[2]);
    echo "\n";
    echo $members[5];
    echo "\n";
    // 配列の要素の数を数えてる
    echo count($members);
    echo "\n";

    // 連想配列
    // 配列のindex部分を開発者の好きな文字列 (キー)で指定して、
    // データの意味をわかりやすくし、より可読性を上げることができるもの
    // APIという技術によく使われる
    $devices = array("Apple" => "iPhone", "Google" => "Android", "Windows" => "Windows Phone");
    // key => value    key        value      key         value  ...
    // このkeyが配列のindexの変わり
    echo $devices["Apple"];
    echo $devices["Windows"];

    // NULL
    // プログラムの中だと、0はなんかあるになる
    // nullっていうのは、そこに何もない
    // nullっていうのがある
    // プログラムに何もないということを伝えるためのもの
    $null = null;
    echo $null;

    // なぜnullが必要か
    // もし何もないことを表現しないと、プログラム側はどう返答して良いかわからず、
    // 停止してしまうことも。
    // それを防ぐために、開発者自らが「何もない」ことを自分なりに定義してしまうと、
    // 開発者それぞれで「何もない」の定義が違ってきてしまい、プログラムとして
    // 成り立たなくなってしまったり、他の人のコードを読むのが困難になる。
    // そのため、言語ごとに一律で「何もない」とは？を定義するために
    // nullやnilなどが存在するようになった。

    // if文
    // 条件分岐文
    // もし、与えられた条件を満たすのなら、処理を実行する。
    // そうでなければ、処理を無視するか、別に与えた処理をする。
    // 基本構文
    // if (条件) {
    //     処理
    // }

    // 例:ログインしているユーザーかどうかを判定する
    $currentUserName = "shinyahirai";
    // $currentUserName = null;

    // if ($currentUserName == "shinyahirai") {
    if ($currentUserName) {
      echo "\nWelcome back ";
      echo $currentUserName;
      echo "\n";
    } else {
      // 条件が一致しなかった場合に処理したい内容をここに書く
      echo "\nPlease sign in";
    }

    // if文は、条件の()内に入れたものがtrueを返すときにはif以下の処理を、
    // falseを返すときにはelse以下の処理をします。

    // 比較演算子
    // 右と左の値をなんらかの形で比較したいときにつかう
    // 右と左が正しいかどうか ==
    // 右と左が正しくないかどうか !=
    // 右が左より大きいかどうか <
    // 右が左より小さいかどうか >
    // 右が左と等しいもしくは大きいかどうか <=
    // 右が左と等しいもしくは小さいかどうか >=

    // 特殊な演算子
    // or演算子
    // ||
    // A もしくは B の条件がtrueなら
    // and演算子
    // &&
    // A と B の両方の条件がtrueなら

    if (true || false) {
      // 処理
    }

    if (true && true) {
      // 処理
    }

    // !
    // 式や変数のはじめに!をつけると、逆の意味になることが多い
    // 変数の前につけると、その変数の中身がfalse (空だったりしたら)という意味になる


    // for文
    // 繰り返し文
    // 処理を繰り返したい場合に使用する
    // for (基準の変数初期化; 条件; カウント) {
    //     繰り返したい処理
    // }

    for ($i = 0; $i < 100; $i++) { 
      echo "\n";
      echo $i;
      echo " 好きだ！";
    }

    // $i++
    // $i + 1
    // $i--
    // $i - 1

    // for文は、配列と組み合わせて使うことが多い
    // $membersを使ってみる
    $countMembers = count($members);
    // 7件データが入っているので、7がcountMembersに代入されます

    // このfor文は、7回繰り返される
    for ($i = 0; $i < $countMembers; $i++) { 
      echo "\n";
      echo "メンバーID : ";
      echo $i+1; // 繰り返されるたびにカウントアップします
      echo " = ";
      echo $members[$i]; // 配列からひとつの要素を指定する場合は
      // 配列[index番号]で取り出せるルールを使って
      // index番号の部分にカウントアップされる$iを入れる

      // この手法は実践でかなり多用される手法なので、完璧にマスターして下さい
    }











?>
